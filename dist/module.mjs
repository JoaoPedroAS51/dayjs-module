import { defineNuxtModule, isNuxt2, isNuxt3, getNuxtVersion, createResolver, addPlugin, addTemplate, addAutoImport } from '@nuxt/kit';
import consola from 'consola';

const name = "@nuxtjs/dayjs";
const version = "2.0.0";

const generateConfigContents = ({ plugins, defaultLocale, locales, defaultTimeZone }) => {
  const shouldSetDefaultLocale = !!defaultLocale;
  const shouldSetDefaultTimeZone = !!defaultTimeZone;
  const shouldImportDayJs = !!plugins.length || shouldSetDefaultLocale || shouldSetDefaultTimeZone;
  return `// Generated by @nuxtjs/dayjs
${shouldImportDayJs ? "import dayjs from 'dayjs'" : ""}

${locales.map((l) => `import 'dayjs/locale/${l}'`).join("\n")}
${shouldSetDefaultLocale ? `dayjs.locale('${defaultLocale}')` : ""}

${plugins.map((p) => {
    const _p = renamePlugin(p);
    return `import ${_p} from 'dayjs/plugin/${p}'
dayjs.extend(${_p})`;
  }).join("\n")}
${shouldSetDefaultTimeZone ? `dayjs.tz.setDefault('${defaultTimeZone}')` : ""}
`;
};
function renamePlugin(plugin) {
  return plugin.replace(/[^A-Za-z]/g, "_");
}

const formatLogMessage = (message) => `[@nuxtjs/dayjs] ${message}`;
const log = (type, message) => consola[type](formatLogMessage(message));

const validateModuleOptions = (options) => {
  return [
    validateLocales(options),
    validateTimeZone(options)
  ].every(Boolean);
};
const validateLocales = ({ defaultLocale, locales }) => {
  if (defaultLocale && defaultLocale !== "en" && !locales.includes(defaultLocale)) {
    log("error", '`defaultLocale` must be either `"en"` or one defined in `locales` option');
    return false;
  }
  return true;
};
const validateTimeZone = ({ defaultTimeZone, plugins }) => {
  if (defaultTimeZone && !!plugins.length) {
    const timeZonePluginIndex = plugins.findIndex((p) => p === "timezone" || p === "timezone.js");
    if (timeZonePluginIndex === -1) {
      log("error", "Timezone plugin must be set in `plugins` option when `defaultTimeZone` option is set");
      return false;
    }
    const utcPluginIndex = plugins.findIndex((p) => p === "utc" || p === "utc.js");
    if (utcPluginIndex === -1 || utcPluginIndex > timeZonePluginIndex) {
      log("error", "UTC plugin must be set before Timezone plugin in `plugins` option");
      return false;
    }
  }
  return true;
};

const module = defineNuxtModule({
  meta: {
    name,
    version,
    configKey: "dayjs",
    compatibility: {
      bridge: true
    }
  },
  defaults: {
    locales: [],
    defaultLocale: null,
    plugins: [],
    defaultTimeZone: null
  },
  setup(options, nuxt) {
    if (!isNuxt2() && !isNuxt3()) {
      throw new Error(formatLogMessage(`Day.js module doesn't support Nuxt v${getNuxtVersion(nuxt)}`));
    }
    const isValid = validateModuleOptions(options);
    if (!isValid) {
      throw new Error(formatLogMessage("You must set valid module options"));
    }
    nuxt.options.build.transpile.push("@nuxtjs/dayjs");
    const { resolve } = createResolver(import.meta.url);
    const runtimeDir = resolve("./runtime");
    addPlugin({
      src: resolve(runtimeDir, `plugin`)
    });
    addTemplate({
      filename: "dayjs.config.mjs",
      getContents: () => generateConfigContents(options)
    });
    addAutoImport({
      name: "useDayjs",
      as: "useDayjs",
      from: resolve(runtimeDir, "composables")
    });
    nuxt.hook("prepare:types", ({ references }) => {
      const plugins = options.plugins.map((p) => ({ types: `dayjs/plugin/${p}` }));
      references.push(...plugins);
    });
  }
});

export { module as default };
